apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: greenledger-ingress
  namespace: greenledger-staging
  labels:
    app: greenledger
    environment: staging
  annotations:
    # NGINX Ingress Controller annotations
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/rewrite-target: /$2
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"

    # Rate limiting
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"

    # CORS
    nginx.ingress.kubernetes.io/enable-cors: "true"
    nginx.ingress.kubernetes.io/cors-allow-origin: "https://staging.greenledger.app,http://localhost:3000"
    nginx.ingress.kubernetes.io/cors-allow-methods: "GET,POST,PUT,DELETE,OPTIONS"
    nginx.ingress.kubernetes.io/cors-allow-headers: "Content-Type,Authorization,X-Requested-With"

    # Security headers (using safer annotations instead of configuration-snippet)
    nginx.ingress.kubernetes.io/custom-http-errors: "404,503"
    nginx.ingress.kubernetes.io/proxy-body-size: "10m"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "60"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "60"

    # Load balancing
    nginx.ingress.kubernetes.io/upstream-hash-by: "$remote_addr"

    # Timeouts
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "30"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "30"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "30"

    # Body size
    nginx.ingress.kubernetes.io/proxy-body-size: "10m"

    # SSL/TLS
    cert-manager.io/cluster-issuer: "letsencrypt-staging"
spec:
  tls:
  - hosts:
    - staging-api.greenledger.app
    secretName: greenledger-staging-tls
  rules:
  - host: staging-api.greenledger.app
    http:
      paths:
      # Calculator Service
      - path: /api/v1/calculator(/|$)(.*)
        pathType: Prefix
        backend:
          service:
            name: calculator-service
            port:
              number: 8081

      # Tracker Service
      - path: /api/v1/tracker(/|$)(.*)
        pathType: Prefix
        backend:
          service:
            name: tracker-service
            port:
              number: 8082

      # Wallet Service
      - path: /api/v1/wallet(/|$)(.*)
        pathType: Prefix
        backend:
          service:
            name: wallet-service
            port:
              number: 8083

      # User Auth Service
      - path: /api/v1/auth(/|$)(.*)
        pathType: Prefix
        backend:
          service:
            name: user-auth-service
            port:
              number: 8084

      # Reporting Service
      - path: /api/v1/reports(/|$)(.*)
        pathType: Prefix
        backend:
          service:
            name: reporting-service
            port:
              number: 8085

      # Health check endpoint (load balancer)
      - path: /health
        pathType: Exact
        backend:
          service:
            name: user-auth-service
            port:
              number: 8084

      # Metrics endpoint (for monitoring)
      - path: /metrics
        pathType: Exact
        backend:
          service:
            name: user-auth-service
            port:
              number: 8084
---
# Certificate for staging environment
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: greenledger-staging-cert
  namespace: greenledger-staging
  labels:
    app: greenledger
    environment: staging
spec:
  secretName: greenledger-staging-tls
  issuerRef:
    name: letsencrypt-staging
    kind: ClusterIssuer
  dnsNames:
  - staging-api.greenledger.app
---
# Middleware for additional security (if using Traefik)
apiVersion: traefik.containo.us/v1alpha1
kind: Middleware
metadata:
  name: security-headers
  namespace: greenledger-staging
  labels:
    app: greenledger
    environment: staging
spec:
  headers:
    customRequestHeaders:
      X-Forwarded-Proto: "https"
    customResponseHeaders:
      X-Frame-Options: "SAMEORIGIN"
      X-Content-Type-Options: "nosniff"
      X-XSS-Protection: "1; mode=block"
      Referrer-Policy: "strict-origin-when-cross-origin"
    contentSecurityPolicy: "default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; font-src 'self' data:; connect-src 'self' https:; frame-ancestors 'self';"
---
# Rate limiting middleware (if using Traefik)
apiVersion: traefik.containo.us/v1alpha1
kind: Middleware
metadata:
  name: rate-limit
  namespace: greenledger-staging
  labels:
    app: greenledger
    environment: staging
spec:
  rateLimit:
    average: 100
    period: 1m
    burst: 20
---
# Service Monitor for Prometheus (if using Prometheus Operator)
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: greenledger-services
  namespace: greenledger-staging
  labels:
    app: greenledger
    environment: staging
spec:
  selector:
    matchLabels:
      app: greenledger
  endpoints:
  - port: http
    path: /metrics
    interval: 30s
    scrapeTimeout: 10s
  namespaceSelector:
    matchNames:
    - greenledger-staging
