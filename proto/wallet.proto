syntax = "proto3";

package wallet;

option go_package = "github.com/greenledger/proto/wallet";

import "google/protobuf/timestamp.proto";

// Wallet service for managing carbon credits
service WalletService {
  // Get user's carbon credit balance
  rpc GetBalance(GetBalanceRequest) returns (GetBalanceResponse);
  
  // Credit carbon credits to user's wallet
  rpc CreditBalance(CreditBalanceRequest) returns (CreditBalanceResponse);
  
  // Debit carbon credits from user's wallet
  rpc DebitBalance(DebitBalanceRequest) returns (DebitBalanceResponse);
  
  // Transfer credits between users
  rpc TransferCredits(TransferCreditsRequest) returns (TransferCreditsResponse);
  
  // Get transaction history
  rpc GetTransactionHistory(GetTransactionHistoryRequest) returns (GetTransactionHistoryResponse);
  
  // Get wallet statistics
  rpc GetWalletStats(GetWalletStatsRequest) returns (GetWalletStatsResponse);
}

// Transaction types
enum TransactionType {
  TRANSACTION_TYPE_UNSPECIFIED = 0;
  TRANSACTION_TYPE_CREDIT_EARNED = 1;
  TRANSACTION_TYPE_CREDIT_SPENT = 2;
  TRANSACTION_TYPE_TRANSFER_IN = 3;
  TRANSACTION_TYPE_TRANSFER_OUT = 4;
  TRANSACTION_TYPE_ADJUSTMENT = 5;
}

// Transaction status
enum TransactionStatus {
  TRANSACTION_STATUS_UNSPECIFIED = 0;
  TRANSACTION_STATUS_PENDING = 1;
  TRANSACTION_STATUS_COMPLETED = 2;
  TRANSACTION_STATUS_FAILED = 3;
  TRANSACTION_STATUS_CANCELLED = 4;
}

// Credit source types
enum CreditSource {
  CREDIT_SOURCE_UNSPECIFIED = 0;
  CREDIT_SOURCE_ECO_ACTIVITY = 1;
  CREDIT_SOURCE_CARBON_OFFSET = 2;
  CREDIT_SOURCE_PURCHASE = 3;
  CREDIT_SOURCE_REWARD = 4;
  CREDIT_SOURCE_TRANSFER = 5;
}

// Wallet balance information
message WalletBalance {
  string user_id = 1;
  double available_credits = 2;
  double pending_credits = 3;
  double total_earned = 4;
  double total_spent = 5;
  google.protobuf.Timestamp last_updated = 6;
}

// Transaction record
message Transaction {
  string transaction_id = 1;
  string user_id = 2;
  TransactionType type = 3;
  TransactionStatus status = 4;
  double amount = 5;
  double balance_after = 6;
  CreditSource source = 7;
  string description = 8;
  string reference_id = 9; // Reference to source activity/calculation
  string from_user_id = 10; // For transfers
  string to_user_id = 11; // For transfers
  google.protobuf.Timestamp created_at = 12;
  google.protobuf.Timestamp updated_at = 13;
  map<string, string> metadata = 14;
}

// Request/Response messages
message GetBalanceRequest {
  string user_id = 1;
}

message GetBalanceResponse {
  WalletBalance balance = 1;
}

message CreditBalanceRequest {
  string user_id = 1;
  double amount = 2;
  CreditSource source = 3;
  string description = 4;
  string reference_id = 5;
  map<string, string> metadata = 6;
}

message CreditBalanceResponse {
  Transaction transaction = 1;
  WalletBalance updated_balance = 2;
}

message DebitBalanceRequest {
  string user_id = 1;
  double amount = 2;
  string description = 3;
  string reference_id = 4;
  map<string, string> metadata = 5;
}

message DebitBalanceResponse {
  Transaction transaction = 1;
  WalletBalance updated_balance = 2;
}

message TransferCreditsRequest {
  string from_user_id = 1;
  string to_user_id = 2;
  double amount = 3;
  string description = 4;
  map<string, string> metadata = 5;
}

message TransferCreditsResponse {
  Transaction from_transaction = 1;
  Transaction to_transaction = 2;
  WalletBalance from_balance = 3;
  WalletBalance to_balance = 4;
}

message GetTransactionHistoryRequest {
  string user_id = 1;
  TransactionType type = 2; // Optional filter
  TransactionStatus status = 3; // Optional filter
  google.protobuf.Timestamp start_date = 4;
  google.protobuf.Timestamp end_date = 5;
  int32 limit = 6;
  int32 offset = 7;
}

message GetTransactionHistoryResponse {
  repeated Transaction transactions = 1;
  int32 total_count = 2;
}

message GetWalletStatsRequest {
  string user_id = 1;
  google.protobuf.Timestamp start_date = 2;
  google.protobuf.Timestamp end_date = 3;
}

message GetWalletStatsResponse {
  WalletStats stats = 1;
}

message WalletStats {
  string user_id = 1;
  double total_earned = 2;
  double total_spent = 3;
  double current_balance = 4;
  int32 total_transactions = 5;
  double average_transaction_amount = 6;
  repeated CreditSourceStats source_breakdown = 7;
  repeated MonthlyStats monthly_stats = 8;
}

message CreditSourceStats {
  CreditSource source = 1;
  double total_amount = 2;
  int32 transaction_count = 3;
}

message MonthlyStats {
  int32 year = 1;
  int32 month = 2;
  double earned = 3;
  double spent = 4;
  double net_change = 5;
}
