name: 📦 Dependency Updates

on:
  schedule:
    # Run weekly on Mondays at 9 AM UTC
    - cron: "0 9 * * 1"
  workflow_dispatch:
    inputs:
      update_type:
        description: "Type of update to perform"
        required: true
        default: "minor"
        type: choice
        options:
          - patch
          - minor
          - major
          - all

env:
  GO_VERSION: "1.21"

jobs:
  # Job 1: Update Go Dependencies
  update-go-deps:
    name: 🐹 Update Go Dependencies
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service:
          [
            root,
            shared,
            calculator,
            tracker,
            wallet,
            user-auth,
            reporting,
            certifier,
          ]
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 🐹 Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: 📦 Update dependencies
        run: |
          if [ "${{ matrix.service }}" == "root" ]; then
            WORK_DIR="."
          elif [ "${{ matrix.service }}" == "shared" ]; then
            WORK_DIR="shared"
          else
            WORK_DIR="services/${{ matrix.service }}"
          fi

          if [ -d "$WORK_DIR" ] && [ -f "$WORK_DIR/go.mod" ]; then
            cd "$WORK_DIR"
            
            echo "Updating dependencies in $WORK_DIR..."
            
            # Get current dependencies
            go list -m -u all > before_update.txt
            
            # Update dependencies based on input
            case "${{ github.event.inputs.update_type || 'minor' }}" in
              "patch")
                go get -u=patch ./...
                ;;
              "minor")
                go get -u ./...
                ;;
              "major"|"all")
                # Get list of dependencies and update them individually
                go list -m -u all | grep -v "^$(go list -m)$" | while read -r line; do
                  if [[ $line == *"["* ]]; then
                    module=$(echo "$line" | awk '{print $1}')
                    echo "Updating $module to latest version..."
                    go get "$module@latest" || echo "Failed to update $module"
                  fi
                done
                ;;
            esac
            
            # Clean up
            go mod tidy
            
            # Get updated dependencies
            go list -m -u all > after_update.txt
            
            # Show changes
            echo "=== Dependency Changes in $WORK_DIR ==="
            if ! diff -u before_update.txt after_update.txt; then
              echo "Dependencies updated successfully"
            else
              echo "No dependency changes"
            fi
            
            # Clean up temp files
            rm -f before_update.txt after_update.txt
          else
            echo "Skipping $WORK_DIR - no go.mod found"
          fi

      - name: 🧪 Run tests
        run: |
          if [ "${{ matrix.service }}" == "root" ]; then
            WORK_DIR="."
          elif [ "${{ matrix.service }}" == "shared" ]; then
            WORK_DIR="shared"
          else
            WORK_DIR="services/${{ matrix.service }}"
          fi

          if [ -d "$WORK_DIR" ] && [ -f "$WORK_DIR/go.mod" ]; then
            cd "$WORK_DIR"
            if [ -n "$(find . -name '*_test.go' -type f)" ]; then
              echo "Running tests in $WORK_DIR..."
              go test ./... || echo "Tests failed in $WORK_DIR"
            else
              echo "No tests found in $WORK_DIR"
            fi
          fi

      - name: 📊 Upload dependency changes
        uses: actions/upload-artifact@v4
        with:
          name: dependency-changes-${{ matrix.service }}
          path: |
            ${{ matrix.service == 'root' && '.' || matrix.service == 'shared' && 'shared' || format('services/{0}', matrix.service) }}/go.mod
            ${{ matrix.service == 'root' && '.' || matrix.service == 'shared' && 'shared' || format('services/{0}', matrix.service) }}/go.sum

  # Job 2: Update Docker Base Images
  update-docker-images:
    name: 🐳 Update Docker Base Images
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 🔍 Check for Docker image updates
        run: |
          echo "Checking for Docker base image updates..."

          # Find all Dockerfiles
          find . -name "Dockerfile" -type f | while read -r dockerfile; do
            echo "Checking $dockerfile..."
            
            # Extract base images
            grep "^FROM" "$dockerfile" | while read -r from_line; do
              image=$(echo "$from_line" | awk '{print $2}')
              echo "Base image: $image"
              
              # Check if image has a specific version tag
              if [[ $image == *":"* ]] && [[ $image != *":latest" ]]; then
                base_image=$(echo "$image" | cut -d':' -f1)
                current_tag=$(echo "$image" | cut -d':' -f2)
                
                echo "Checking for updates to $base_image:$current_tag"
                
                # For common base images, suggest updates
                case $base_image in
                  "golang")
                    echo "Consider updating to golang:1.21-alpine"
                    ;;
                  "alpine")
                    echo "Consider updating to alpine:latest"
                    ;;
                  "postgres")
                    echo "Consider updating to postgres:15-alpine"
                    ;;
                  "redis")
                    echo "Consider updating to redis:7-alpine"
                    ;;
                esac
              fi
            done
          done

      - name: 🔨 Test Docker builds
        run: |
          # Test building each service to ensure compatibility
          for service in calculator tracker wallet user-auth; do
            if [ -f "services/$service/Dockerfile" ]; then
              echo "Testing Docker build for $service..."
              docker build -t test-$service -f services/$service/Dockerfile . || echo "Build failed for $service"
            else
              echo "⚠️ Dockerfile not found for $service, skipping build test"
            fi
          done

  # Job 3: Update GitHub Actions
  update-github-actions:
    name: ⚙️ Update GitHub Actions
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 🔍 Check for action updates
        run: |
          echo "Checking for GitHub Actions updates..."

          # Find all workflow files
          find .github/workflows -name "*.yml" -o -name "*.yaml" | while read -r workflow; do
            echo "Checking $workflow..."
            
            # Extract action versions
            grep -E "uses: .+@v[0-9]+" "$workflow" | while read -r line; do
              action=$(echo "$line" | sed 's/.*uses: //' | sed 's/@.*//')
              version=$(echo "$line" | sed 's/.*@//')
              echo "Action: $action, Current version: $version"
              
              # Suggest common updates
              case $action in
                "actions/checkout")
                  echo "Consider updating to actions/checkout@v4"
                  ;;
                "actions/setup-go")
                  echo "Consider updating to actions/setup-go@v4"
                  ;;
                "docker/build-push-action")
                  echo "Consider updating to docker/build-push-action@v5"
                  ;;
                "docker/setup-buildx-action")
                  echo "Consider updating to docker/setup-buildx-action@v3"
                  ;;
              esac
            done
          done

  # Job 4: Security Updates
  security-updates:
    name: 🔒 Security Updates
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 🐹 Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: 🔍 Check for security vulnerabilities
        run: |
          echo "Checking for security vulnerabilities..."

          # Install govulncheck
          go install golang.org/x/vuln/cmd/govulncheck@latest

          # Check each service for vulnerabilities
          for service_dir in . shared services/*/; do
            if [ -f "$service_dir/go.mod" ]; then
              echo "Checking $service_dir for vulnerabilities..."
              cd "$service_dir"
              govulncheck ./... || echo "Vulnerabilities found in $service_dir"
              cd - > /dev/null
            fi
          done

      - name: 🔧 Apply security patches
        run: |
          echo "Applying security patches..."

          # Update all dependencies to patch versions
          for service_dir in . shared services/*/; do
            if [ -f "$service_dir/go.mod" ]; then
              echo "Updating $service_dir..."
              cd "$service_dir"
              go get -u=patch ./...
              go mod tidy
              cd - > /dev/null
            fi
          done

  # Job 5: Create Pull Request
  create-pr:
    name: 📝 Create Pull Request
    runs-on: ubuntu-latest
    needs:
      [
        update-go-deps,
        update-docker-images,
        update-github-actions,
        security-updates,
      ]
    if: always()
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 📥 Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: 🔄 Apply dependency updates
        run: |
          echo "Applying dependency updates..."

          # Copy updated go.mod and go.sum files
          find artifacts/ -name "go.mod" -o -name "go.sum" | while read -r file; do
            # Extract service name from artifact path
            service=$(echo "$file" | cut -d'/' -f2 | sed 's/dependency-changes-//')
            
            if [ "$service" == "root" ]; then
              target_dir="."
            elif [ "$service" == "shared" ]; then
              target_dir="shared"
            else
              target_dir="services/$service"
            fi
            
            if [ -d "$target_dir" ]; then
              cp "$file" "$target_dir/"
              echo "Updated $(basename "$file") in $target_dir"
            fi
          done

      - name: 🔍 Check for changes
        id: changes
        run: |
          if git diff --quiet; then
            echo "has-changes=false" >> $GITHUB_OUTPUT
            echo "No changes detected"
          else
            echo "has-changes=true" >> $GITHUB_OUTPUT
            echo "Changes detected"
            git diff --name-only
          fi

      - name: 📝 Generate PR description
        if: steps.changes.outputs.has-changes == 'true'
        run: |
          echo "# 📦 Automated Dependency Updates" > pr-description.md
          echo "" >> pr-description.md
          echo "This PR contains automated dependency updates generated by the dependency update workflow." >> pr-description.md
          echo "" >> pr-description.md
          echo "## 🔄 Update Type: ${{ github.event.inputs.update_type || 'minor' }}" >> pr-description.md
          echo "" >> pr-description.md
          echo "## 📋 Changes" >> pr-description.md
          echo "" >> pr-description.md

          # List changed files
          echo "### Modified Files:" >> pr-description.md
          git diff --name-only | while read -r file; do
            echo "- \`$file\`" >> pr-description.md
          done
          echo "" >> pr-description.md

          echo "## 🧪 Testing" >> pr-description.md
          echo "" >> pr-description.md
          echo "- [ ] All tests pass" >> pr-description.md
          echo "- [ ] Security scans pass" >> pr-description.md
          echo "- [ ] Docker builds succeed" >> pr-description.md
          echo "" >> pr-description.md

          echo "## 🔒 Security" >> pr-description.md
          echo "" >> pr-description.md
          echo "This update includes security patches and vulnerability fixes." >> pr-description.md
          echo "" >> pr-description.md

          echo "## 📝 Notes" >> pr-description.md
          echo "" >> pr-description.md
          echo "- This PR was automatically generated" >> pr-description.md
          echo "- Please review changes before merging" >> pr-description.md
          echo "- Run full test suite before deployment" >> pr-description.md

      - name: 🌿 Create branch and commit
        if: steps.changes.outputs.has-changes == 'true'
        run: |
          # Create branch
          branch_name="automated/dependency-updates-$(date +%Y%m%d-%H%M%S)"
          git checkout -b "$branch_name"

          # Configure git
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

          # Commit changes
          git add .
          git commit -m "chore(deps): automated dependency updates

          - Update Go dependencies to latest ${{ github.event.inputs.update_type || 'minor' }} versions
          - Apply security patches
          - Update base Docker images where applicable

          Generated by: ${{ github.workflow }} workflow
          Trigger: ${{ github.event_name }}
          Run ID: ${{ github.run_id }}"

          # Push branch
          git push origin "$branch_name"

          echo "BRANCH_NAME=$branch_name" >> $GITHUB_ENV

      - name: 📝 Create Pull Request
        if: steps.changes.outputs.has-changes == 'true'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const prDescription = fs.readFileSync('pr-description.md', 'utf8');

            const { data: pr } = await github.rest.pulls.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: '📦 Automated Dependency Updates',
              head: process.env.BRANCH_NAME,
              base: 'main',
              body: prDescription,
              draft: false
            });

            // Add labels
            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: pr.number,
              labels: ['dependencies', 'automated', 'security']
            });

            console.log(`Created PR #${pr.number}: ${pr.html_url}`);

      - name: 📊 Summary
        if: always()
        run: |
          echo "## 📦 Dependency Update Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Update Type:** ${{ github.event.inputs.update_type || 'minor' }}" >> $GITHUB_STEP_SUMMARY
          echo "**Trigger:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Changes Detected:** ${{ steps.changes.outputs.has-changes }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "${{ steps.changes.outputs.has-changes }}" == "true" ]; then
            echo "✅ Pull request created successfully" >> $GITHUB_STEP_SUMMARY
            echo "🔗 Branch: \`${{ env.BRANCH_NAME }}\`" >> $GITHUB_STEP_SUMMARY
          else
            echo "ℹ️ No updates available" >> $GITHUB_STEP_SUMMARY
          fi
