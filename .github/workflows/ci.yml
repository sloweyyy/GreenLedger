name: üîÑ Continuous Integration

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  GO_VERSION: "1.23"
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Job 1: Code Quality and Linting
  lint:
    name: üîç Code Quality & Linting
    runs-on: ubuntu-latest
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üêπ Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: üì¶ Cache Go modules
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: üì• Download dependencies and tidy modules
        run: |
          # Root module
          echo "üì¶ Processing root module..."
          go mod download
          go mod tidy

          # Shared module
          echo "üì¶ Processing shared module..."
          if [ -d "shared" ] && [ -f "shared/go.mod" ]; then
            cd shared
            go mod download
            go mod tidy
            cd ..
          fi

          # Service modules
          for service_dir in services/*/; do
            if [ -d "$service_dir" ] && [ -f "$service_dir/go.mod" ]; then
              service_name=$(basename "$service_dir")
              echo "üì¶ Processing $service_name module..."
              cd "$service_dir"
              go mod download
              go mod tidy
              cd ../..
            fi
          done

      - name: üîç Run golangci-lint
        uses: golangci/golangci-lint-action@v3
        with:
          version: latest
          args: --timeout=5m

      - name: üîí Run gosec security scanner
        run: |
          go install github.com/securecodewarrior/gosec/cmd/gosec@latest
          gosec -fmt sarif -out gosec.sarif ./...

      - name: üìä Upload SARIF file
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: gosec.sarif

  # Job 2: Unit Tests
  test:
    name: üß™ Unit Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [calculator, tracker, wallet, user-auth, reporting, certifier]
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üêπ Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: üì¶ Cache Go modules
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: üì• Download dependencies and tidy modules
        run: |
          # Root module
          echo "üì¶ Processing root module..."
          go mod download
          go mod tidy

          # Shared module
          echo "üì¶ Processing shared module..."
          if [ -d "shared" ] && [ -f "shared/go.mod" ]; then
            cd shared
            go mod download
            go mod tidy
            cd ..
          fi

          # Target service module
          if [ -d "services/${{ matrix.service }}" ] && [ -f "services/${{ matrix.service }}/go.mod" ]; then
            echo "üì¶ Processing ${{ matrix.service }} module..."
            cd "services/${{ matrix.service }}"
            go mod download
            go mod tidy
            cd ../..
          fi

      - name: üß™ Run tests with coverage
        run: |
          if [ -d "services/${{ matrix.service }}" ]; then
            cd services/${{ matrix.service }}
            go test -v -race -coverprofile=coverage.out -covermode=atomic ./...
            go tool cover -html=coverage.out -o coverage.html
          else
            echo "Service ${{ matrix.service }} not found, skipping tests"
          fi

      - name: üìä Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        if: hashFiles('./services/${{ matrix.service }}/coverage.out') != ''
        with:
          file: ./services/${{ matrix.service }}/coverage.out
          flags: ${{ matrix.service }}
          name: ${{ matrix.service }}-coverage
          fail_ci_if_error: false

  # Job 3: Integration Tests
  integration-test:
    name: üîó Integration Tests
    runs-on: ubuntu-latest
    needs: [lint, test]
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: password
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üêπ Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: üì¶ Cache Go modules
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: üì• Download dependencies and tidy modules
        run: |
          # Root module
          echo "üì¶ Processing root module..."
          go mod download
          go mod tidy

          # Shared module
          echo "üì¶ Processing shared module..."
          if [ -d "shared" ] && [ -f "shared/go.mod" ]; then
            cd shared
            go mod download
            go mod tidy
            cd ..
          fi

          # Service modules
          for service_dir in services/*/; do
            if [ -d "$service_dir" ] && [ -f "$service_dir/go.mod" ]; then
              service_name=$(basename "$service_dir")
              echo "üì¶ Processing $service_name module..."
              cd "$service_dir"
              go mod download
              go mod tidy
              cd ../..
            fi
          done

      - name: üê≥ Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: üöÄ Start Kafka
        run: |
          docker run -d --name kafka \
            -p 9092:9092 \
            -e KAFKA_BROKER_ID=1 \
            -e KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181 \
            -e KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://localhost:9092 \
            -e KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1 \
            -e KAFKA_AUTO_CREATE_TOPICS_ENABLE=true \
            --network host \
            confluentinc/cp-kafka:latest

      - name: ‚è≥ Wait for services
        run: |
          sleep 30
          # Verify PostgreSQL
          pg_isready -h localhost -p 5432 -U postgres
          # Verify Redis
          redis-cli -h localhost -p 6379 ping

      - name: üß™ Run integration tests
        env:
          DB_HOST: localhost
          DB_PORT: 5432
          DB_USER: postgres
          DB_PASSWORD: password
          DB_NAME: test_db
          REDIS_HOST: localhost
          REDIS_PORT: 6379
          KAFKA_BROKERS: localhost:9092
          JWT_SECRET: test-secret-key
          ENVIRONMENT: test
        run: |
          # Run integration tests if they exist
          if [ -d "tests/integration" ]; then
            cd tests/integration && go test -v ./...
          fi

  # Job 4: Build and Test Docker Images
  docker-build:
    name: üê≥ Docker Build & Test
    runs-on: ubuntu-latest
    needs: [lint, test]
    strategy:
      matrix:
        service: [calculator, tracker, wallet, user-auth]
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üê≥ Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: üîê Log in to Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: üè∑Ô∏è Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: üîç Check if Dockerfile exists
        id: dockerfile-check
        run: |
          if [ -f "./services/${{ matrix.service }}/Dockerfile" ]; then
            echo "dockerfile-exists=true" >> $GITHUB_OUTPUT
          else
            echo "dockerfile-exists=false" >> $GITHUB_OUTPUT
            echo "‚ö†Ô∏è Dockerfile not found for ${{ matrix.service }}, skipping build"
          fi

      - name: üî® Build and push Docker image
        if: steps.dockerfile-check.outputs.dockerfile-exists == 'true'
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./services/${{ matrix.service }}/Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: üß™ Test Docker image
        if: steps.dockerfile-check.outputs.dockerfile-exists == 'true'
        run: |
          # Test that the image can be built and runs
          docker build -t test-${{ matrix.service }} -f ./services/${{ matrix.service }}/Dockerfile .
          # Basic smoke test - check if binary exists and is executable
          docker run --rm test-${{ matrix.service }} ls -la /root/main

  # Job 5: Load Testing
  load-test:
    name: ‚ö° Load Testing
    runs-on: ubuntu-latest
    needs: [integration-test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üêπ Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: üöÄ Start services with Docker Compose
        run: |
          docker-compose up -d
          sleep 60  # Wait for services to be ready

      - name: ‚ö° Run load tests
        run: |
          cd tests/load
          go test -v -timeout=10m ./...

      - name: üìä Upload load test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: load-test-results
          path: tests/load/results/

      - name: üõë Stop services
        if: always()
        run: docker-compose down

  # Job 6: Security Scanning
  security:
    name: üîí Security Scanning
    runs-on: ubuntu-latest
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üîç Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "fs"
          scan-ref: "."
          format: "sarif"
          output: "trivy-results.sarif"

      - name: üìä Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: "trivy-results.sarif"

      - name: üîç Run Snyk to check for vulnerabilities
        uses: snyk/actions/golang@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high
        continue-on-error: true
